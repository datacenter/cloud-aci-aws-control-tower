AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to integrate Cisco CAPIC with multi-accounts in AWS environments powered by AWS Control Tower (MPCT-iuiqovvc)"


Parameters:
  cAPICCloudInfraAddress:
    Description: IP address or FQDN of the Cloud APIC EC2 Instance
    Type: String
    Default: ''
  NetworkAccountID:
    Description: AWS Account Id where the cAPICCloudInfraAddress is running.
    Type: String
    MinLength: 12
    MaxLength: 12
  cAPICAdmin:
    Description: Admin username
    Type: String
    Default: admin
  AdminPassword:
    Description: Password of AdminUser
    Type: String
    NoEcho: True
  BaseCIDRRange:
    Description: Base CIDR range to allocate CIDRs.
    Type: String
    Default: '10.0.0.0/16'
  MaskLength:
    Description: Netmask length to allocate CIDRs to VPCs
    Type: String
    Default: '24'
  NumberOfSubnets:
    Description: Number of Subnets to create on each VPC
    Type: String
    Default: '4'
  cAPICHubNetworkName:
    Description: Hub network name in the cAPIC Infra account
    Type: String
    Default: 'hub1'
  VPCRegion:
    Description: Comma separated list of AWS regions for VPC creation. All regions should MATCH with regions configured in cAPIC.
    Type: String
    Default: 'us-east-1'
  S3BucketLocation:
    Description: Amazon S3 Bucket where the lambda function was copied
    Type: String

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cisco cAPIC Infrastructure details
        Parameters:
          - NetworkAccountID
          - cAPICCloudInfraAddress
          - cAPICAdmin
          - AdminPassword
          - S3BucketLocation
      - Label:
          default: Transit Gateway to connect to
        Parameters:
          - cAPICHubNetworkName
      - Label:
          default: Network Configuration to apply on new accounts
        Parameters:
          - BaseCIDRRange
          - MaskLength
          - NumberOfSubnets
          - VPCRegion

Mappings:
  CapicSecret:
    SecretManager:
      SecretName: "/cisco/capic_infra_credentials"
  CapicInfraAddress:
    ParameterStore:
      ParameterName: "/cisco/capic_infra_admin"
  CapicBaseCidr:
    ParameterStore:
      ParameterName: "/cisco/capic_base_cidr"
  CapicMaskLength:
    ParameterStore:
      ParameterName: "/cisco/capic_mask_length"
  CapicSubnetsCount:
    ParameterStore:
      ParameterName: "/cisco/capic_no_of_subnets"
  CapicHubNetworkName:
    ParameterStore:
      ParameterName: "/cisco/capic_hub_network_name"
  CapicVPCRegion:
    ParameterStore:
      ParameterName: "/cisco/capic_vpc_region_name"

Resources:
  CAPICSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Secret that contains cAPIC admin username and password"
      Name: !FindInMap ["CapicSecret", "SecretManager", "SecretName"]
      SecretString: !Sub '{"cpaic_admin_user":"${cAPICAdmin}", "password":"${AdminPassword}"}'
      KmsKeyId: !GetAtt CAPICControlTowerKMSKey.Arn

  CAPICInfraAddressVariable:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "cAPIC Management Account IP Address"
      Name: !FindInMap ["CapicInfraAddress", "ParameterStore", "ParameterName"]
      Type: "String"
      Value: !Ref cAPICCloudInfraAddress

  CAPICBaseCidrVariable:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Base CIDR range"
      Name: !FindInMap ["CapicBaseCidr", "ParameterStore", "ParameterName"]
      Type: "String"
      Value: !Ref BaseCIDRRange

  CAPICMaskLength:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Mask Length to check for non-overlapping CIDRs"
      Name: !FindInMap ["CapicMaskLength", "ParameterStore", "ParameterName"]
      Type: "String"
      Value: !Ref MaskLength

  CAPICSubnetCount:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Number of subnets to create in a VPC"
      Name: !FindInMap ["CapicSubnetsCount", "ParameterStore", "ParameterName"]
      Type: "String"
      Value: !Ref NumberOfSubnets

  CapicVPCRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Region where VPC is deployed"
      Name: !FindInMap ["CapicVPCRegion", "ParameterStore", "ParameterName"]
      Type: "String"
      Value: !Ref VPCRegion

  CAPICHubNetworkName:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "cAPIC Hub Network Name"
      Name: !FindInMap ["CapicHubNetworkName", "ParameterStore", "ParameterName"]
      Type: "String"
      Value: !Ref cAPICHubNetworkName

  CAPICSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref CAPICSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaRoleToCaptureEvents.Arn
            Action: 'secretsmanager:GetSecretValue'
            Resource: !Ref CAPICSecret

  CAPICControlTowerKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "This is KMS Key Id used to encrypt/decrypt the Secret"
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action:
            - kms:Create*
            - kms:Describe*
            - kms:Enable*
            - kms:List*
            - kms:Put*
            - kms:Update*
            - kms:Revoke*
            - kms:Disable*
            - kms:Get*
            - kms:Delete*
            - kms:ScheduleKeyDeletion
            - kms:CancelKeyDeletion
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS: 
            - !Sub ${AWS::AccountId}
          Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt
            - kms:GenerateDataKey
            - kms:CreateGrant
            - kms:DescribeKey
          Resource: '*'
          Condition:
            StringEquals:
              kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
              kms:CallerAccount: !Sub ${AWS::AccountId}

  CAPICControlTowerKMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/CAPIC-Control-Tower-${AWS::StackName}"
      TargetKeyId:
        Ref: CAPICControlTowerKMSKey

  CaptureControlTowerLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
            - CreateManagedAccount
          eventSource:
            - controltower.amazonaws.com
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
      State: ENABLED
      Targets:
        - Arn: !GetAtt "CAPICTriggerOnLifeCycleEvent.Arn"
          Id: IDCaptureControlTowerLifeCycleEvents

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "CAPICTriggerOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CaptureControlTowerLifeCycleEvents.Arn"

  LambdaRoleToCaptureEvents:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "ec2:DescribeAvailabilityZones supports only all resources"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                  - 'cloudformation:DescribeStackSetOperation'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/capic-cross-account-role-stackset:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref CAPICSecret
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !GetAtt CAPICControlTowerKMSKey.Arn
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cisco/*'
              - Effect: Allow
                Action:
                  - ec2:DescribeAvailabilityZones
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CAPICTriggerOnLifeCycleEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketLocation
        S3Key: capic_deployment_package.zip
      Handler: capic_requests.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRoleToCaptureEvents.Arn"
      Runtime: python3.7
      Timeout: 600
      Environment:
        Variables:
          CAPIC_API_SECRET: !FindInMap ["CapicSecret", "SecretManager", "SecretName"]
          CAPIC_MGMT_IP: !FindInMap ["CapicInfraAddress", "ParameterStore", "ParameterName"]
          CAPIC_BASE_CIDR: !FindInMap ["CapicBaseCidr", "ParameterStore", "ParameterName"]
          CAPIC_MASK_LENGTH: !FindInMap ["CapicMaskLength", "ParameterStore", "ParameterName"]
          CAPIC_SUBNET_COUNT: !FindInMap ["CapicSubnetsCount", "ParameterStore", "ParameterName"]
          CAPIC_HUB_NETWORK_NAME: !FindInMap ["CapicHubNetworkName", "ParameterStore", "ParameterName"]
          VPC_REGION: !FindInMap ["CapicVPCRegion", "ParameterStore", "ParameterName"]


  CAPICCrossAccountRoleStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      Description: StackSet for creating IAM roles for StackSet monitoring
      StackSetName: capic-cross-account-role-stackset
      Parameters:
        - ParameterKey: NetworkAccountID
          ParameterValue: !Ref NetworkAccountID
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole'
      ExecutionRoleName: "AWSControlTowerExecution"
      Capabilities:
        - CAPABILITY_NAMED_IAM
      TemplateBody: |
        {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "Template for creating trusted tenant role",
          "Parameters": {
              "NetworkAccountID": {
                  "Description": "AWS Account Id where the cAPICCloudInfraAddress is running.",
                  "Type": "String",
                  "MinLength": 12,
                  "MaxLength": 12
              }
          },
          "Resources": {
            "AccessPolicyForApicTenant": {
              "Properties": {
                "Description": "Access policy for APIC Tenant",
                "ManagedPolicyName": "ApicTenantPolicy",
                "Path": "/",
                "PolicyDocument": {
                  "Statement": [{
                    "Action": ["ec2:*"],
                    "Effect": "Allow",
                    "Resource": ["*"]
                  }, {
                    "Action": ["s3:*"],
                    "Effect": "Allow",
                    "Resource": ["*"]
                  }, {
                    "Action": "elasticloadbalancing:*",
                    "Effect": "Allow",
                    "Resource": "*"
                  }, {
                    "Action": ["config:*"],
                    "Effect": "Allow",
                    "Resource": ["*"]
                  }, {
                    "Action": ["sqs:*"],
                    "Effect": "Allow",
                    "Resource": "*"
                  }, {
                    "Action": ["cloudtrail:*"],
                    "Effect": "Allow",
                    "Resource": ["*"]
                  }, {
                    "Action": ["cloudwatch:*"],
                    "Effect": "Allow",
                    "Resource": ["*"]
                  }, {
                    "Action": ["events:*"],
                    "Effect": "Allow",
                    "Resource": "*"
                  }, {
                    "Action": ["logs:*"],
                    "Effect": "Allow",
                    "Resource": "*"
                  }, {
                    "Action": "acm:*",
                    "Effect": "Allow",
                    "Resource": "*"
                  }, {
                    "Action": "resource-groups:*",
                    "Effect": "Allow",
                    "Resource": "*"
                  }, {
                    "Action": "ram:*",
                    "Effect": "Allow",
                    "Resource": "*"
                  }, {
                    "Action": ["iam:List*", "iam:Get*", "iam:CreateServiceLinkedRole", "iam:DeleteServiceLinkedRole", "iam:GetServiceLinkedRoleDeletionStatus", "iam:AttachRolePolicy", "iam:PutRolePolicy", "iam:UpdateRoleDescription", "iam:UploadServerCertificate", "iam:DeleteServerCertificate", "iam:UpdateRoleDescription", "iam:PassRole"],
                    "Effect": "Allow",
                    "Resource": ["*"]
                  }, {
                    "Action": "iam:PassRole",
                    "Effect": "Allow",
                    "Resource": {
                      "Fn::Join": ["", ["arn:aws:iam::", {
                        "Ref": "AWS::AccountId"
                      }, ":role/ApicTenantRole"]]
                    }
                  }],
                  "Version": "2012-10-17"
                }
              },
              "Type": "AWS::IAM::ManagedPolicy"
            },
            "TrustedRoleForTenant": {
              "Description": "Tenant role for C-Apic",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Statement": [{
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": [ 
                        {"Fn::Sub": "arn:aws:iam::${NetworkAccountID}:root" },
                        {"Fn::Sub": "arn:aws:iam::${NetworkAccountID}:role/ApicAdmin" }
                        ],
                      "Service": "vpc-flow-logs.amazonaws.com"
                    }
                  }],
                  "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [{
                  "Ref": "AccessPolicyForApicTenant"
                }],
                "Path": "/",
                "RoleName": "ApicTenantRole"
              },
              "Type": "AWS::IAM::Role"
            }
          }
        }
